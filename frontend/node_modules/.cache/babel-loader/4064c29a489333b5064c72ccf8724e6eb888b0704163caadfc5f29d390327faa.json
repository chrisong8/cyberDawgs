{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\cyberDawgs\\\\frontend\\\\src\\\\chatbot\\\\ActionProvider.jsx\";\nimport React from 'react';\n\n// Provides action functions for bot to render responses to user input\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = _ref => {\n  let {\n    createChatBotMessage,\n    setState,\n    children\n  } = _ref;\n  // handles simple \"hello\" message\n  const handleHello = () => {\n    const botMessage = createChatBotMessage('Hello. Nice to meet you.');\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, botMessage]\n    }));\n  };\n\n  // handles questions about NIST CSF thru NLP model\n  const nlp = async message => {\n    let url = 'http://127.0.0.1:5000/api';\n    console.log(JSON.stringify(message));\n    let answer = \"Sorry try again\";\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(message)\n      }).then(response => {\n        if (response.ok) {\n          return response.text();\n        }\n      }).then(text => {\n        answer = createChatBotMessage(text);\n      }).catch(error => {\n        console.error(\"Error with fetch\" + error);\n      });\n    } catch (error) {\n      console.error(`FETCH: ${error}`);\n    }\n    let botMessage = answer;\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, botMessage]\n    }));\n  };\n\n  // Can filter blank or inappropriate user input\n  const idk = () => {\n    const response = 'I am not sure how to answer that question... try again?';\n    const botMessage = createChatBotMessage(response);\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, botMessage]\n    }));\n  };\n\n  // Return all actions\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          handleHello,\n          nlp,\n          idk\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","ActionProvider","createChatBotMessage","setState","children","handleHello","botMessage","prev","messages","nlp","message","url","console","log","JSON","stringify","answer","response","fetch","method","headers","body","then","ok","text","catch","error","idk","Children","map","child","cloneElement","actions"],"sources":["C:/Users/chris/cyberDawgs/frontend/src/chatbot/ActionProvider.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n// Provides action functions for bot to render responses to user input\r\nconst ActionProvider = ({ createChatBotMessage, setState, children }) => {\r\n  // handles simple \"hello\" message\r\n    const handleHello = () => {\r\n        const botMessage = createChatBotMessage('Hello. Nice to meet you.');\r\n    \r\n        setState((prev) => ({\r\n          ...prev,\r\n          messages: [...prev.messages, botMessage],\r\n        }));\r\n    };\r\n\r\n    // handles questions about NIST CSF thru NLP model\r\n    const nlp = async (message) => {\r\n        let url = 'http://127.0.0.1:5000/api';\r\n\r\n        console.log(JSON.stringify(message));\r\n\r\n        let answer = \"Sorry try again\"\r\n\r\n        try {\r\n          const response = await fetch(url, {\r\n              method: 'POST',\r\n              headers: {\r\n                  'Access-Control-Allow-Origin': '*',\r\n                  'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(message)\r\n          }).then((response) => {\r\n              if (response.ok) {\r\n                return response.text()\r\n              }\r\n          }).then(text => {\r\n            answer = createChatBotMessage(text);\r\n          }).catch(error => {\r\n            console.error(\"Error with fetch\" + error);\r\n          });\r\n      } catch (error) {\r\n          console.error(`FETCH: ${error}`);\r\n      }\r\n\r\n      let botMessage = answer;\r\n\r\n        setState((prev) => ({\r\n          ...prev,\r\n          messages: [...prev.messages, botMessage],\r\n        }));\r\n    };\r\n\r\n    // Can filter blank or inappropriate user input\r\n    const idk = () => {\r\n        const response = 'I am not sure how to answer that question... try again?'\r\n\r\n        const botMessage = createChatBotMessage(response);\r\n    \r\n        setState((prev) => ({\r\n          ...prev,\r\n          messages: [...prev.messages, botMessage],\r\n        }));\r\n    };\r\n\r\n  // Return all actions\r\n  return (\r\n    <div>\r\n      {React.Children.map(children, (child) => {\r\n        return React.cloneElement(child, {\r\n          actions: {\r\n            handleHello,\r\n            nlp,\r\n            idk,\r\n          },\r\n        });\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionProvider;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA;AACA,MAAMC,cAAc,GAAG,QAAkD;EAAA,IAAjD;IAAEC,oBAAoB;IAAEC,QAAQ;IAAEC;EAAS,CAAC;EAClE;EACE,MAAMC,WAAW,GAAG,MAAM;IACtB,MAAMC,UAAU,GAAGJ,oBAAoB,CAAC,0BAA0B,CAAC;IAEnEC,QAAQ,CAAEI,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,UAAU;IACzC,CAAC,CAAC,CAAC;EACP,CAAC;;EAED;EACA,MAAMG,GAAG,GAAG,MAAOC,OAAO,IAAK;IAC3B,IAAIC,GAAG,GAAG,2BAA2B;IAErCC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,CAAC;IAEpC,IAAIM,MAAM,GAAG,iBAAiB;IAE9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;QAC9BQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,6BAA6B,EAAE,GAAG;UAClC,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEP,IAAI,CAACC,SAAS,CAACL,OAAO;MAChC,CAAC,CAAC,CAACY,IAAI,CAAEL,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACM,EAAE,EAAE;UACf,OAAON,QAAQ,CAACO,IAAI,EAAE;QACxB;MACJ,CAAC,CAAC,CAACF,IAAI,CAACE,IAAI,IAAI;QACdR,MAAM,GAAGd,oBAAoB,CAACsB,IAAI,CAAC;MACrC,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;QAChBd,OAAO,CAACc,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC;MAC3C,CAAC,CAAC;IACN,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAE,UAASA,KAAM,EAAC,CAAC;IACpC;IAEA,IAAIpB,UAAU,GAAGU,MAAM;IAErBb,QAAQ,CAAEI,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,UAAU;IACzC,CAAC,CAAC,CAAC;EACP,CAAC;;EAED;EACA,MAAMqB,GAAG,GAAG,MAAM;IACd,MAAMV,QAAQ,GAAG,yDAAyD;IAE1E,MAAMX,UAAU,GAAGJ,oBAAoB,CAACe,QAAQ,CAAC;IAEjDd,QAAQ,CAAEI,IAAI,KAAM;MAClB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,UAAU;IACzC,CAAC,CAAC,CAAC;EACP,CAAC;;EAEH;EACA,oBACE;IAAA,UACGN,KAAK,CAAC4B,QAAQ,CAACC,GAAG,CAACzB,QAAQ,EAAG0B,KAAK,IAAK;MACvC,oBAAO9B,KAAK,CAAC+B,YAAY,CAACD,KAAK,EAAE;QAC/BE,OAAO,EAAE;UACP3B,WAAW;UACXI,GAAG;UACHkB;QACF;MACF,CAAC,CAAC;IACJ,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAC,KA1EI1B,cAAc;AA4EpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}